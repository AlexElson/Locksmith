Zachary Builter

100/100

CSCI 3415: Principles of Programming Languages
Project 4 Grade Sheet, flex and bison

Points Possible	Description
1	5/5	Flex runs without warnings or errors

2	10/10	Bison runs without warnings or errors

3	5/5	C++ code compiles and runs

4	10/10	Monsters and treasures are optional with a Room.

5	10/10	A Monster's hits and weapon may be provided in either order

6	10/10	The program reads directly from dungeon.txt

7	10/10	After parsing dungeon.txt, the user is able to either print the
                sorted dungeon or exit.

8	10/10	Each call to strdup() in the flex file is matched by a call to
                free() in the bison file

9	10/10	The code uses Monster, Treasure, Room, and Dungeon classes.

10	10/10	Rooms, Treasures, and Monsters allocated by new are released
                using delete in the Dungeon destructor.

11	10/10	The various strings (room description, monster type, etc.) do
                not have any erroneous text (e.g., leading whitespace).
================================================================================
#10, I'd counsel maintaining a lists of pointers rather than of objects, then releasing them in the appropriate destructors.  As written, the dynamic memory allocation isn't doing you any benefit.  That is, you're currently just: 
        allocate, 
        copy (via assignment by value to vector), 
        release
Under your current architecture, avoiding dynamic memory and just using objects
would be correct (if not preferred).  Perhaps you already know this and were
just trying to appease the grade sheet?  Anyway, good project.
